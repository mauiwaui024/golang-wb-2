package main

import (
	"fmt"
	"sync"
)

func main() {
	nums := []int{2, 4, 6, 8, 10}
	var wg sync.WaitGroup

	for _, num := range nums {
		wg.Add(1)
		go func(x int) {
			defer wg.Done()
			square := x * x
			fmt.Println("current num is", x)
			fmt.Println(square)
		}(num)
	}

	wg.Wait()
}

// В Go при использовании анонимной функции (или замыкания) внутри цикла, как в нашем случае, переменные захватываются в момент создания горутины. В данном случае переменная num захватывается замыканием, и каждая горутина получает свою копию num. Когда горутина запускается, она работает с копией num, которая была актуальной на момент создания горутины.

// Это означает, что каждая горутина получает свое собственное значение x, которое соответствует значению num, принятому на момент создания горутины. Таким образом, каждая горутина получает свою собственную копию x, и изменения x в одной горутине не влияют на x в других горутинах.

// Это называется "захват переменной (variable capture)" в замыкании, и это одна из ключевых концепций в Go для работы с горутинами и замыканиями.

// Deadlock происходит, когда горутины блокируют друг друга, ожидая завершения каких-то операций или доступа к ресурсам, которые заблокированы другими горутинами.
