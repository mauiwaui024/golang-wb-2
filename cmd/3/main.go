package main

import (
	"fmt"
	"sync"
)

func main() {
	nums := []int{2, 4, 6, 8, 10}
	results := make(chan int, len(nums))

	var wg sync.WaitGroup

	for _, num := range nums {
		wg.Add(1)
		go func(x int) {
			defer wg.Done()
			results <- x * x
		}(num)
	}

	sum := 0
	go func() {
		wg.Wait()
		close(results)
	}()
	// for num := range results {
	// 	wg.Add(1)
	// 	go func(x int) {
	// 		defer wg.Done()
	// 		sum += x
	// 	}(num)

	// }

	fmt.Println("sum is equal", sum)
}

// Ожидание завершения всех горутин с помощью wg.Wait() также блокирует выполнение основной горутины до тех пор, пока все горутины не завершат свою работу. Таким образом, обе эти операции (ожидание завершения горутин и чтение из канала) являются блокирующими операциями.

//в данном контексте "основная горутина" и "текущая горутина" относятся к горутине, которая исполняется в функции main(). В языке Go, функция main() запускается в отдельной горутине и является точкой входа для исполнения программы, поэтому в контексте данной программы "основной горутиной" и "текущей горутиной" является горутина, исполняющая функцию main().

// wg.Add() не обязательно должен быть внутри горутины. Он должен быть вызван в основной горутине перед запуском каждой новой горутины, чтобы указать WaitGroup, что еще одна горутина будет выполняться.

// В вашем исходном коде вызов wg.Add(1) находится в цикле for _, num := range nums, что означает, что перед запуском каждой горутины увеличивается счетчик WaitGroup на 1. Затем каждая горутина вызывает Done(), когда завершает свою работу, чтобы уменьшить счетчик. В итоге, когда все горутины завершат свою работу, вызов wg.Wait() в основной горутине будет разблокирован.

// Когда мы вызываем wg.Wait() и close(results) в отдельной горутине, основная горутина может продолжать выполнять другие операции параллельно с ожиданием завершения горутин и закрытием канала. Это может быть полезно, если у нас есть другие задачи, которые можно выполнять параллельно. Однако, в вашем конкретном случае, когда нет других параллельных задач, нет необходимости в запуске wg.Wait() и close(results) в отдельной горутине.
